"""
Serializadores para el modelo Usuario en MongoDB.
"""

import re  # 游늷 Importamos el m칩dulo de expresiones regulares para validar contrase침as
from rest_framework import serializers  # 游늷 Importamos el serializador de Django REST Framework
import bcrypt  # 游늷 Para el cifrado seguro de contrase침as
from .models import Usuario  # 游늷 Importamos nuestro modelo de usuario

class UsuarioSerializer(serializers.Serializer):
    """
    Serializador para manejar datos del usuario en la API.
    """

    # 游늷 Convertimos el ObjectId de MongoDB a string para evitar errores
    id = serializers.SerializerMethodField()
    
    # 游늷 Campos de usuario
    username = serializers.CharField(max_length=150)
    email = serializers.EmailField()
    
    # 游늷 La contrase침a solo se escribe en la solicitud, pero no se devuelve en la respuesta
    password = serializers.CharField(write_only=True)
    
    # 游늷 Definimos el rol del usuario con opciones "agente" o "solicitante"
    rol = serializers.ChoiceField(choices=["agente", "solicitante"], default="solicitante")

    def get_id(self, obj):
        """
        Convierte el ObjectId de MongoDB a string.
        """
        return str(obj.id)

    def validate_password(self, value):
        """
        Valida que la contrase침a cumpla con los requisitos de seguridad.
        """
        
        # 游늷 Verificamos que tenga al menos 8 caracteres
        if len(value) < 8:
            raise serializers.ValidationError("La contrase침a debe tener al menos 8 caracteres.")

        # 游늷 Requerimos al menos una letra may칰scula
        if not re.search(r"[A-Z]", value):
            raise serializers.ValidationError("Debe incluir al menos una letra may칰scula.")

        # 游늷 Requerimos al menos un n칰mero
        if not re.search(r"[0-9]", value):
            raise serializers.ValidationError("Debe incluir al menos un n칰mero.")

        return value

    def create(self, validated_data):
        """
        Crea un usuario con la contrase침a cifrada.
        """

        # 游늷 Ciframos la contrase침a con bcrypt
        validated_data["password"] = bcrypt.hashpw(
            validated_data["password"].encode('utf-8'), bcrypt.gensalt()
        ).decode('utf-8')

        # 游늷 Normalizamos el rol a min칰sculas
        validated_data["rol"] = validated_data["rol"].lower()

        # 游늷 Creamos y guardamos el usuario en la base de datos
        usuario = Usuario(**validated_data)
        usuario.save()

        return usuario

    def update(self, instance, validated_data):
        """
        Actualiza datos del usuario, encriptando la nueva contrase침a si se cambia.
        """

        if "password" in validated_data:
            validated_data["password"] = bcrypt.hashpw(
                validated_data["password"].encode('utf-8'), bcrypt.gensalt()
            ).decode('utf-8')  # 游늷 Hasheamos la nueva contrase침a si se cambia

        # 游늷 Asignamos los valores actualizados al objeto del usuario
        for attr, value in validated_data.items():
            setattr(instance, attr, value)

        # 游늷 Guardamos los cambios en la base de datos
        instance.save()

        return instance
